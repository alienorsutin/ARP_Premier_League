# -*- coding: utf-8 -*-
"""FINAL ARP_DEA_PREMIER LEAGUE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10LzTnLc2cx-sXUo0_fzRNfvO3AYa7NR9

This Google Colloboratory Link contains all the code for the DEA Models to be used in the analysis FOR STRIKERS

The Excel file to be used for strikers is available from the Full Results Library under the following sheet names:

DEA MODEL 1: /content/DEA Model 1_Strikers.csv 

DEA MODEL 2: /content/DEA Model 2_Data.csv

#**DEA Model 1** 

Performance Efficiency

4 Technical Areas:


*   Goal Scoring
*   Creativity
*   Dribbling and Ball Carrying
*   Defending
"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

"""# **Strikers**

**1) Goal Scoring for Strikers**
"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.0001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.0001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0001, upBound=None, cat='Continuous') # Create a variable n5>=0
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
 
    
     # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(4):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

weights_matrix

efficiency_table =np.empty((52,5))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(5):
       value = ((weights_matrix[1,column]*data["Gls"][row])+(weights_matrix[2,column]*data["SoT"][row])+(weights_matrix[3,column]*data["G-xG"][row])+(weights_matrix[4,column]*data["GCA"][row]))/((weights_matrix[0,column]*data["Minutes Played"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.3f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=3)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n4*data["Big Chances Missed"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n4*data["Big Chances Missed"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n2  #Goals > SoT
    model += n1 >= n3   #Goals > G-Xg
    model += n1 >= n4  #Goals > Big Chances Missed
    model += n4 >= n2  #Goals > Shots on Target
    model += n5 >= n2  #Goals > Shots on Target
    model += n5 >= n4  #Goals > Big Chances Missed
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""**2) Creativity for strikers**"""

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(5):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,5))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(5):
       value = ((weights_matrix[1,column]*data["xA"][row])+(weights_matrix[2,column]*data["KP"][row])+(weights_matrix[3,column]*data["PPA"][row])+(weights_matrix[4,column]*data["SCA"][row])++(weights_matrix[5,column]*data["Progressive Passes"][row]))/((weights_matrix[0,column]*data["Minutes Played"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(5):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Vooook1.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA


        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""3) Dribbling and Ball Carrying for Strikers"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1
    n2 = pulp.LpVariable("n2", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable n6>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
    model += n1*data["Dribbles Succ"][k] + n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Dribbles Succ"][i] + n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3*data["GCA Drib"][k] >= n1*data["Dribbles Succ"][k]   
    model += n3*data["GCA Drib"][k] >= n4*data["Carry PrgDist"][k]   
    model += n3*data["GCA Drib"][k] >= n5*data["Carries Final Third"][k]  
    model += n3*data["GCA Drib"][k] >= n6*data["Carry into box"][k]  
    model += n2*data["SCA Drib"][k] >= n1*data["Dribbles Succ"][k]   
    model += n2*data["SCA Drib"][k] >= n4*data["Carry PrgDist"][k]   
    model += n2*data["SCA Drib"][k] >= n5*data["Carries Final Third"][k]   
    model += n2*data["SCA Drib"][k] >= n6*data["Carry into box"][k]   

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(6):
        value= list_weights[n]
        weights_matrix[n,k] = value

    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,7))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(7):
       value = ((weights_matrix[1,column]*data["Dribbles Succ"][row])+(weights_matrix[2,column]*data["SCA Drib"][row])+(weights_matrix[3,column]*data["GCA Drib"][row])+(weights_matrix[4,column]*data["Carry PrgDist"][row])+(weights_matrix[5,column]*data["Carries Final Third"][row])+ (weights_matrix[6,column]*data["Carry into box"][row]))/((weights_matrix[0,column]*data["Minutes Played"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["Dribbles Succ"][k] + n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Dribbles Succ"][i] + n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n1   #Goals > SoT
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n1   #Goals > Shots on Target
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""4) Defending for Strikers"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv ", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3*data["Blocks and Interceptions"][k] >= n2*data["Pressures Succ"][k]   #Goals > SoT
        
     # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(4):
        value= list_weights[n]
        weights_matrix[n,k] = value

    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,5))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(5):
       value = ((weights_matrix[1,column]*data["Tackles TklW"][row])+(weights_matrix[2,column]*data["Pressures Succ"][row])+(weights_matrix[3,column]*data["Blocks and Interceptions"][row])+(weights_matrix[4,column]*data["Recoveries"][row]))/((weights_matrix[0,column]*data["Minutes Played"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 1_Strikers.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3*data["Blocks and Interceptions"][k] >= n2*data["Pressures Succ"][k]
    
    print(pulp.value(model.objective))

"""#Full Backs"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_FBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,70))
for k in range(70):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n4*data["Big Chances Missed"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(70): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n4*data["Big Chances Missed"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n1*data["Gls"][i] >= n4*data["Big Chances Missed"][i]  #Goals > Big Chances Missed
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n4*data["Big Chances Missed"][i]  #GCA > Big Chances Missed
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
 
    
     # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(5):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)



!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_FBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,70))
for k in range(70):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n4*data["Big Chances Missed"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(70): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n4*data["Big Chances Missed"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n1*data["Gls"][i] >= n4*data["Big Chances Missed"][i]  #Goals > Big Chances Missed
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n4*data["Big Chances Missed"][i]  #GCA > Big Chances Missed
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt']))  
    
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_FBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,70))
for k in range(70):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(70): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA


    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""Dribbling and Ball Carrying"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_FBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,70))
for k in range(70):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(70): #NUMBER OF STRIKERS
        model += n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n1   #Goals > SoT
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n1   #Goals > Shots on Target
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""Defending"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_FBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,70))
for k in range(70):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(70): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3*data["Blocks and Interceptions"][k] >= n2*data["Pressures Succ"][k]   #Goals > SoT
      

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""**Attacking Midfielders**

Goal Scoring
"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_AMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,65))
for k in range(65):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n4*data["Big Chances Missed"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(65): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n4*data["Big Chances Missed"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n1*data["Gls"][i] >= n4*data["Big Chances Missed"][i]  #Goals > Big Chances Missed
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n4*data["Big Chances Missed"][i]  #GCA > Big Chances Missed
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt']))  
    
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_AMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,65))
for k in range(65):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(65): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA


    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_AMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,65))
for k in range(65):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(65): #NUMBER OF STRIKERS
        model += n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n1   #Goals > SoT
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n1   #Goals > Shots on Target
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA1_AMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,65))
for k in range(65):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(65): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3*data["Blocks and Interceptions"][k] >= n2*data["Pressures Succ"][k]   #Goals > SoT
      

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""# **CMs and CDMs**"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CM and CDMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,97))
for k in range(97):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(97): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt']))  
    
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CM and CDMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,97))
for k in range(97):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(97): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA


    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CM and CDMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,97))
for k in range(97):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["SCA Drib"][k] + n2*data["GCA Drib"][k]+ n3*data["Carry PrgDist"][k] + n4*data["Carries Final Third"][k] + n5*data["Carry into box"][k]    #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(97): #NUMBER OF STRIKERS
        model += n1*data["SCA Drib"][i] + n2*data["GCA Drib"][i] + n3*data["Carry PrgDist"][i] + n4*data["Carries Final Third"][i] + n5*data["Carry into box"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n2 >= n3   #Goals > SoT(%)
    model += n2 >= n4   #Goals > G-Xg
    model += n2 >= n5   #Goals > Big Chances Missed
    model += n1 >= n3   #Goals > SoT(%)
    model += n1 >= n4   #Goals > Shots on Target
    model += n1 >= n5   #Goals > SoT(%)
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CM and CDMs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,97))
for k in range(97):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(97): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3*data["Blocks and Interceptions"][k] >= n2*data["Pressures Succ"][k]   #Goals > SoT
      

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""# **Center Backs**"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,84))
for k in range(84):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n5>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k]+ n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(84): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] <= 0
   

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][i] >= n2*data["SoT"][i]  #Goals > SoT
    model += n1*data["Gls"][i] >= n3*data["G-xG"][i]  #Goals > G-Xg
    model += n5*data["GCA"][i] >= n2*data["SoT"][i]  #GCA > Shots on Target
    model += n5*data["GCA"][i] >= n3*data["G-xG"][i]  #GCA > Big Chances Missed
    
  
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt']))  
    
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,84))
for k in range(84):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(84): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA


    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/CBs.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,84))
for k in range(84):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n5 = pulp.LpVariable("n5", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["SCA Drib"][k] + n2*data["GCA Drib"][k]+ n3*data["Carry PrgDist"][k] + n4*data["Carries Final Third"][k] + n5*data["Carry into box"][k]    #objective function
    
    model += m1*data["Minutes Played"][k] == 1 #first constraint (equality)

    for i in range(84): #NUMBER OF STRIKERS
        model += n1*data["SCA Drib"][i] + n2*data["GCA Drib"][i] + n3*data["Carry PrgDist"][i] + n4*data["Carries Final Third"][i] + n5*data["Carry into box"][i] - m1*data["Minutes Played"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n2 >= n3   #Goals > SoT(%)
    model += n2 >= n4   #Goals > G-Xg
    model += n2 >= n5   #Goals > Big Chances Missed
    model += n1 >= n3   #Goals > SoT(%)
    model += n1 >= n4   #Goals > Shots on Target
    model += n1 >= n5   #Goals > SoT(%)
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))



"""# DEA MODEL 2 - Cost Efficiency

---

# Strikers

1) GOAL SCORING
"""

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n6>=0
    m1 = pulp.LpVariable("m1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 2, there is just 1 input - Salary

    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Salary"][k] == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Salary"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][k] >= n2*data["SoT"][k]   #Goals > SoT
    model += n1*data["Gls"][k] >= n3*data["G-xG"][k]   #Goals > G-Xg
    model += n1*data["Gls"][k] >= n5*data["Big Chances Missed"][k]   #Goals > Big Chances Missed
    model += n3*data["G-xG"][k] >= n2*data["SoT"][k]   #Goals > Shots on Target
    model += n5*data["GCA"][k]>= n2*data["SoT"][k]  #Goals > Shots on Target
    model += n5*data["GCA"][k] >= n4*data["Big Chances Missed"][k]   #Goals > Big Chances Missed


    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(5):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,6))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(6):
       value = ((weights_matrix[1,column]*data["Gls"][row])+(weights_matrix[2,column]*data["SoT"][row])+(weights_matrix[3,column]*data["G-xG"][row])+(weights_matrix[4,column]*data["Big Chances Missed"][row])+(weights_matrix[5,column]*data["GCA"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.00001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n4 = pulp.LpVariable("n4", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n4*data["G-xG"][k] + n5*data["Big Chances Missed"][k] + n6*data["GCA"][k]  #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n4*data["G-xG"][i] + n5*data["Big Chances Missed"][i] + n6*data["GCA"][i] -  m1*data["Salary NORM"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 

    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][k] >= n2*data["SoT"][k]   #Goals > SoT
    model += n1*data["Gls"][k] >= n4*data["G-xG"][k]   #Goals > G-Xg
    model += n1*data["Gls"][k] >= n5*data["Big Chances Missed"][k]   #Goals > Big Chances Missed
    model += n4*data["G-xG"][k] >= n2*data["SoT"][k]   #Goals > Shots on Target
    model += n6*data["GCA"][k]>= n2*data["SoT"][k]  #Goals > Shots on Target
    model += n6*data["GCA"][k] >= n5*data["Big Chances Missed"][k]   #Goals > Big Chances Missed
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""DEA MODEL 2, CREATIVITY"""

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k]  #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Salary NORM"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(5):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,6))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(6):
       value = ((weights_matrix[1,column]*data["xA"][row])+(weights_matrix[2,column]*data["KP"][row])+(weights_matrix[3,column]*data["PPA"][row])+(weights_matrix[4,column]*data["SCA"][row])+(weights_matrix[5,column]*data["Progressive Passes"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama Traore', 'Aleksandar Mitrovic', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k]  #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Salary NORM"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA

        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""3) DRIBBLING AND BALL CARRYING"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n1>=0
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["Dribb Succ"][k] + n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Dribb Succ"][i] + n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Salary NORM"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(6):
        value= list_weights[n]
        weights_matrix[n,k] = value
        

    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,7))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(7):
       value = ((weights_matrix[1,column]*data["Dribb Succ"][row])+(weights_matrix[2,column]*data["SCA Drib"][row])+(weights_matrix[3,column]*data["GCA Drib"][row])+(weights_matrix[4,column]*data["Carry PrgDist"][row])+(weights_matrix[5,column]*data["Carries Final Third"][row])+ (weights_matrix[6,column]*data["Carry into box"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n1>=0
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["Dribb Succ"][k] + n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Dribb Succ"][i] + n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Salary NORM"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)
        

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""4) DEFENDING"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.000000000, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable n4>=0
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Salary NORM"][i] <= 0
   
    
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n2   #Goals > SoT
    
    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(4):
        value= list_weights[n]
        weights_matrix[n,k] = value
        

    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((52,5))
average_list =[]
for row in range(52):
    row_values=[]
    for column in range(5):
       value = ((weights_matrix[1,column]*data["Tackles TklW"][row])+(weights_matrix[2,column]*data["Pressures Succ"][row])+(weights_matrix[3,column]*data["Blocks and Interceptions"][row])+(weights_matrix[4,column]*data["Recoveries"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha', 'Willian JosÃ©']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA Model 2_Data.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((5,52))
for k in range(52):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.000000000, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000000000, upBound=None, cat='Continuous') # Create a variable n4>=0
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Salary NORM"][k] == 1 #first constraint (equality)

    for i in range(52): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Salary NORM"][i] <= 0
   
    
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n2   #Goals > SoT
        

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""# **DEA MODEL 3** (Teammate Ability - Abandoned)

1) Goal Scoring
"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA M2.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n6>=0
    m1 = pulp.LpVariable("m1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 2, there is just 1 input - Salary
    m2 = pulp.LpVariable("m2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 2, there is just 1 input - Salary


    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] + m2*data["Team Points"][k] == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] - m2*data["Team Points"][i]<= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][k] >= n2*data["SoT"][k]   #Goals > SoT
    model += n1*data["Gls"][k] >= n3*data["G-xG"][k]   #Goals > G-Xg
    model += n3*data["G-xG"][k] >= n2*data["SoT"][k]   #Goals > Shots on Target
    model += n5*data["GCA"][k]>= n2*data["SoT"][k]  #Goals > Shots on Target


    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(4):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((51,7))
average_list =[]
for row in range(51):
    row_values=[]
    for column in range(7):
       value = ((weights_matrix[2,column]*data["Gls"][row])+(weights_matrix[3,column]*data["SoT"][row])+(weights_matrix[4,column]*data["G-xG"][row])+(weights_matrix[5,column]*data["Big Chances Missed"][row])+(weights_matrix[6,column]*data["GCA"][row]))/((weights_matrix[0,column]*data["Minutes Played"][row])+ (weights_matrix[1,column]*data["Team Points"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/DEA M2.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Goal-Scoring)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n6>=0
    m1 = pulp.LpVariable("m1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 2, there is just 1 input - Salary
    m2 = pulp.LpVariable("m2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 2, there is just 1 input - Salary


    model += n1*data["Gls"][k] + n2*data["SoT"][k] + n3*data["G-xG"][k] + n5*data["GCA"][k]  #objective function
    
    model += m1*data["Minutes Played"][k] + m2*data["Team Points"][k] == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Gls"][i] + n2*data["SoT"][i] + n3*data["G-xG"][i] + n5*data["GCA"][i] -  m1*data["Minutes Played"][i] - m2*data["Team Points"][i]<= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt']))
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1*data["Gls"][k] >= n2*data["SoT"][k]   #Goals > SoT
    model += n1*data["Gls"][k] >= n3*data["G-xG"][k]   #Goals > G-Xg
    model += n3*data["G-xG"][k] >= n2*data["SoT"][k]   #Goals > Shots on Target
    model += n5*data["GCA"][k]>= n2*data["SoT"][k]  #Goals > Shots on Target
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""DEA MODEL 3, Creativity"""

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Strikers DEA Model 2 and 3.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    m2 = pulp.LpVariable("m2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k]  #objective function
    
    model += m1*data["Salary NORM"][k] + m2*data["Teammate Ability"][k]  == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Salary NORM"][i] - m2*data["Teammate Ability"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(5):
        value= list_weights[n]
        weights_matrix[n,k] = value
        
    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((51,7))
average_list =[]
for row in range(51):
    row_values=[]
    for column in range(7):
       value = ((weights_matrix[2,column]*data["xA"][row])+(weights_matrix[3,column]*data["KP"][row])+(weights_matrix[4,column]*data["PPA"][row])+(weights_matrix[5,column]*data["SCA"][row])+(weights_matrix[6,column]*data["Progressive Passes"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row])+(weights_matrix[1,column]*data["Teammate Ability"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama Traore', 'Aleksandar Mitrovic', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Strikers DEA Model 2 and 3.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((7,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Creativity)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    m2 = pulp.LpVariable("m2", lowBound=0.000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["xA"][k] + n2*data["KP"][k] + n3*data["PPA"][k]+ n4*data["SCA"][k] + n5*data["Progressive Passes"][k]  #objective function
    
    model += m1*data["Salary NORM"][k] + m2*data["Teammate Ability"][k]  == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["xA"][i] + n2*data["KP"][i] + n3*data["PPA"][i] + n4*data["SCA"][i] + n5*data["Progressive Passes"][i] - m1*data["Salary NORM"][i] - m2*data["Teammate Ability"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n1 >= n3 #xA > PPA
    model += n2 >= n3  #KP > PPA
    model += n4 >= n3   #SCA > PPA
    model += n1 >= n2   #SCA > PPA
        
    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""DEA Model 3: Dribllig and ball carrying"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Strikers DEA Model 2 and 3.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((8,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n1>=0
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    m2 = pulp.LpVariable("m2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0
    
    model += n1*data["Dribb Succ"][k] + n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Salary NORM"][k] + m2*data["Teammate Ability"][k] == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Dribb Succ"][i] + n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Salary NORM"][i] - m2*data["Teammate Ability"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)

    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(6):
        value= list_weights[n]
        weights_matrix[n,k] = value
        

    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((51,8))
average_list =[]
for row in range(51):
    row_values=[]
    for column in range(8):
       value = ((weights_matrix[2,column]*data["Dribb Succ"][row])+(weights_matrix[3,column]*data["SCA Drib"][row])+(weights_matrix[4,column]*data["GCA Drib"][row])+(weights_matrix[5,column]*data["Carry PrgDist"][row])+(weights_matrix[6,column]*data["Carries Final Third"][row])+ (weights_matrix[7,column]*data["Carry into box"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row])+(weights_matrix[1,column]*data["Salary NORM"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Strikers DEA Model 2 and 3.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((8,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Dribbling and Ball Carrying)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    m2 = pulp.LpVariable("m2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable m1>=0
    n1 = pulp.LpVariable("n1", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n1>=0
    n2 = pulp.LpVariable("n2", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    n5 = pulp.LpVariable("n5", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n5>=0
    n6 = pulp.LpVariable("n6", lowBound=0.00000000001, upBound=None, cat='Continuous') # Create a variable n6>=0
   
    model += n1*data["Dribb Succ"][k] + n2*data["SCA Drib"][k] + n3*data["GCA Drib"][k]+ n4*data["Carry PrgDist"][k] + n5*data["Carries Final Third"][k] + n6*data["Carry into box"][k]    #objective function
    
    model += m1*data["Salary NORM"][k] + m2*data["Teammate Ability"][k] == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Dribb Succ"][i] + n2*data["SCA Drib"][i] + n3*data["GCA Drib"][i] + n4*data["Carry PrgDist"][i] + n5*data["Carries Final Third"][i] + n6*data["Carry into box"][i] - m1*data["Salary NORM"][i] - m2*data["Teammate Ability"][i] <= 0
   
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    
    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n4   #Goals > SoT(%)
    model += n3 >= n5   #Goals > G-Xg
    model += n3 >= n6   #Goals > Big Chances Missed
    model += n2 >= n4   #Goals > SoT(%)
    model += n2 >= n5   #Goals > Shots on Target
    model += n2 >= n6   #Goals > SoT(%)

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""Defending DEA Model 3"""

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Strikers DEA Model 2 and 3.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    n1 = pulp.LpVariable("n1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable n4>=0
    m1 = pulp.LpVariable("m1", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    m2 = pulp.LpVariable("m2", lowBound=0.0000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time

    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Salary NORM"][k] + m2*data["Teammate Ability"][k]  == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Salary NORM"][i] - m2*data["Teammate Ability"][i] <= 0
   
    
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 
    print("Model Status:{}".format(pulp.LpStatus[model.status])) 

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n2   #Goals > SoT
    
    # Displaying Optimal Decision Variables & Reduced Cost per Variable
    list_weights=[]
    for v in model.variables():
	      print(v.name, "=", v.varValue, "\tReduced Cost =", v.dj)
    for v in model.variables():  
        list_weights=list_weights+[v.varValue]
    for n in range(4):
        value= list_weights[n]
        weights_matrix[n,k] = value
    for m in range(2):
        value= list_weights[m]
        weights_matrix[m,k] = value
        

    # Displaying Optimal Value of Objective Function	
    print("Objective=", pulp.value(model.objective))
	
    # Displaying Shadow Price & Slack Value per Constraint
    print ("\nSensitivity Analysis\nConstraint\t\tShadow Price\tSlack")
    for name, c in model.constraints.items():
	      print(name, ":", c, "\t", c.pi, "\t\t", c.slack)

efficiency_table =np.empty((51,6))
average_list =[]
for row in range(51):
    row_values=[]
    for column in range(6):
       value = ((weights_matrix[0,column]*data["Tackles TklW"][row])+(weights_matrix[1,column]*data["Pressures Succ"][row])+(weights_matrix[2,column]*data["Blocks and Interceptions"][row])+(weights_matrix[3,column]*data["Recoveries"][row]))/((weights_matrix[0,column]*data["Salary NORM"][row])+(weights_matrix[1,column]*data["Teammate Ability"][row]))
       efficiency_table[row,column]=value
       row_values=row_values+[value]
    average =mean(row_values)
    average_list =average_list+[average]

    average_list_rounded = [ '%.2f' % elem for elem in average_list ]

    player_list = ['Aaron Connolly', 'Adama TraorÃ©', 'Aleksandar MitroviÄ‡', 'Alexandre Lacazette', 'Anthony Martial', 'Anwar El Ghazi', 'Ashley Barnes', 'Bertrand TraorÃ©', 'Billy Sharp', 'Callum Wilson', 'Che Adams', 'Chris Wood', 'Christian Benteke', 'Daniel James', 'Danny Ings', 'Danny Welbeck', 'Diogo Jota', 'Dominic Calvert-Lewin', 'Edinson Cavani', 'FÃ¡bio Silva', 'Gabriel Jesus', 'Gareth Bale', 'Harry Kane', 'Jamie Vardy', 'Kelechi Iheanacho', 'Marcus Rashford', 'Mason Greenwood', 'MatÄ›j Vydra', 'Mbaye Diagne', 'Michail Antonio', 'Michy Batshuayi', 'Mohamed Salah', 'Oliver Burke', 'Oliver McBurnie', 'Olivier Giroud', 'Ollie Watkins', 'Patrick Bamford', 'Pierre-Emerick Aubameyang', 'RaÃºl JimÃ©nez', 'Raheem Sterling', 'Rhian Brewster', 'Richarlison', 'Riyad Mahrez', 'Roberto Firmino', 'SÃ©bastien Haller', 'Sadio ManÃ©', 'Son Heung-min', 'Tammy Abraham', 'Timo Werner', 'TrÃ©zÃ©guet', 'Wilfried Zaha']
for player in player_list:
    index = player_list.index(player)
    print(average_list_rounded[index])

display(efficiency_table)
efficiency_table = efficiency_table.round(decimals=2)
display(efficiency_table)

!pip install pulp
import pulp
!apt-get install -y -qq glpk-utils

from pulp import GLPK
import pandas as pd # Library to handle data
import numpy as np
from statistics import mean

data = pd.read_csv("/content/Strikers DEA Model 2 and 3.csv", encoding = 'unicode_escape', engine ='python')
#creating a list to store the optimal decision variables
weights_matrix = np.empty((6,51))
for k in range(51):  # Where k represents the number of observations
    model = pulp.LpProblem("DEA Model 1 for Strikers (Defending)", pulp.LpMaximize) # Create an LP maximization problem. We have 1 input, 6 outputs for goal scoring
    m1 = pulp.LpVariable("m1", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    m2 = pulp.LpVariable("m2", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable m1>=0 , where m is denotes my inputs. In DEA model 1, there is just 1 input - playing time
    n1 = pulp.LpVariable("n1", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n1>=0, where n1 represents the weight associated with output 1 - with goal scoring, it will be goals scored
    n2 = pulp.LpVariable("n2", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n2>=0  , simmilar to above
    n3 = pulp.LpVariable("n3", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n3>=0
    n4 = pulp.LpVariable("n4", lowBound=0.0000000001, upBound=None, cat='Continuous') # Create a variable n4>=0
   
    model += n1*data["Tackles TklW"][k] + n2*data["Pressures Succ"][k] + n3*data["Blocks and Interceptions"][k]+ n4*data["Recoveries"][k] #objective function
    
    model += m1*data["Salary NORM"][k] + m2*data["Teammate Ability"][k]  == 1 #first constraint (equality)

    for i in range(51): #NUMBER OF STRIKERS
        model += n1*data["Tackles TklW"][i] + n2*data["Pressures Succ"][i] + n3*data["Blocks and Interceptions"][i] + n4*data["Recoveries"][i] - m1*data["Salary NORM"][i] - m2*data["Teammate Ability"][i] <= 0
   
    
    status = model.solve(GLPK(msg=True, options=['--ranges', 'sensitivity.txt'])) 

    #ADD IN RELATIVE WEIGHT RESTRICTIONS AND CONDITION FOR WEIGHTS TO BE POSITIVE.
    model += n3 >= n2   #Goals > SoT
  

    # Displaying Optimal Value of Objective Function	
    print(pulp.value(model.objective))

"""K-Means Clustering for DEA Model 1"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
# %matplotlib inline

df = pd.read_csv('/content/DEA Model 1 Clustering.csv',encoding= 'unicode_escape' )

km = KMeans(n_clusters=7)
y_predicted = km.fit_predict(df[['GOAL-SCORING DEA EFFICIENCY SCORE (RWRs, NO POSITIVE WEIGHTS)',	'Creativity. Effiiency','Dribbling and Ball Carrying Efficiency',	'Defending Efficiency']])
y_predicted

df

df.drop("ï»¿Player",axis='columns')

sse = []
k_rng = range(1,8)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df.drop("ï»¿Player",axis='columns'))
    sse.append(km.inertia_)

    plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

import matplotlib.pyplot as plt
plot_cluster_percentage = df.div(df.sum(axis=4), axis=0)*100
plot_cluster_percentage
plot_cluster_percentage.plot(kind='barh', stacked=True)
plt.legend(plot_cluster_percentage, bbox_to_anchor=(1.05,1))

